services:
  # webviz:
  #   image: cruise/webviz:latest
  #   container_name: webviz
  #   hostname: webviz
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - ./data:/data # Mount your bag directory if needed
  #   network_mode: host
  #   restart: unless-stopped
  #   depends_on:
  #     - ros_container

  ros_container:
    # image: ros_base_container
    build:
      context: ./ros_container
      dockerfile: Dockerfile
    container_name: ros_container
    hostname: ros_container
    privileged: true # Needed for camera access
    environment:
      DISPLAY: ${DISPLAY}
      QT_X11_NO_MITSHM: 1
      ROS_DISTRO: humble
      ROS_VERSION: 2
      ROS_LOCALHOST_ONLY: 0
      RMW_IMPLEMENTATION: rmw_fastrtps_cpp
      ROS_DOMAIN_ID: 0
      USER: developer
      USER_ID: 1010
      GROUP_ID: 1000
      ROS_MASTER_URI: http://localhost:11311
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ./config:/home/developer/config # Mount config files
      - ./ros_container/api:/home/developer/api # Mount scripts
      - ./data:/home/developer/data # For recordings
      - ./ros_container/create_user.sh:/home/developer/create_user.sh # Mount user creation script
      - ./ros_container/start_services.sh:/home/developer/start_services.sh
    ports:
      - "8000:8000" # FastAPI port
      - "9090:9090" # ROS2 WebSocket port
    network_mode: host
    depends_on:
      db:
        condition: service_healthy
      roscore:
        condition: service_healthy
      # Sagt diesem Container, wo der ROS 1 Master ist
    working_dir: /home/developer
    # Change the entrypoint to execute the new script
    entrypoint: ["/bin/bash", "-c", "./create_user.sh && exec su - developer -c './start_services.sh'"]

  dashboard_container:
    image: node:20
    # build:
    #   context: ./dashboard_container
    container_name: dashboard_container
    hostname: dashboard_container
    ports:
      - "3000:3000" # Dashboard UI port
    network_mode: host
    depends_on:
      ros_container:
        condition: service_started
    volumes:
      - ./dashboard_container/:/app/

    entrypoint: ["/bin/bash", "-c", "cd /app && npm install && npm install --save @xterm/addon-fit && npm run dev"] 



  roscore:
    image: ros:noetic-ros-core
    command: roscore
    network_mode: host
    healthcheck:
      test: ["CMD-SHELL", "source /opt/ros/noetic/setup.bash && rostopic list"]
      interval: 5s
      timeout: 5s
      retries: 5



  # Dienst 3: Der neue, dedizierte Bridge-Container
  ros1_bridge:
    build: ./bridge_container
    command: ros2 run ros1_bridge dynamic_bridge --bridge-all-topics
    restart: unless-stopped
  
    depends_on:
      roscore:
        condition: service_healthy
      ros_container:
        condition: service_started
      dashboard_container:
        condition: service_started
    environment:
      # Sagt diesem Container, wo der ROS 1 Master ist
      ROS_MASTER_URI: "http://200.0.0.243:11311"
    network_mode: host

  db:
    image: postgres:13
    environment:
      POSTGRES_DB: camera_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ros_container/init.sql:/docker-entrypoint-initdb.d/init.sql # Mount the init script
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d camera_db"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  adminer:
    image: adminer
    environment:
      - ADMINER_PORT=8081
    ports:
      - "8080:8081"
    depends_on:
      db:
        condition: service_healthy
    network_mode: host

volumes:
  postgres_data:

  
  # Ihr Dashboard-Container bleibt unverändert
  # dashboard_container:
  #   # ...

# Definieren Sie ein gemeinsames Netzwerk für die ROS-Kommunikation
















  # foxglove_container:
  #   build:
  #     context: ./foxglove_container
  #   container_name: foxglove_container
  #   hostname: foxglove_container
  #   environment:
  #     - DISPLAY=${DISPLAY}
  #     - QT_X11_NO_MITSHM=1
  #   volumes:
  #     - /tmp/.X11-unix:/tmp/.X11-unix:rw
  #     - ./data:/home/foxglove_user/data # Mount data for Foxglove to access bags
  #   network_mode: host # Use host network for X server access
  #   privileged: true # May be needed for some display setups
  #   restart: unless-stopped
  #   depends_on:
  #     - ros_container # Foxglove will likely connect to ROS topics from ros_container
